basePath: /api/v1
definitions:
  models.SongDetail:
    description: Response containing details of a song
    properties:
      link:
        description: |-
          External link to the song
          Required: true
        type: string
      releaseDate:
        description: |-
          Release date of the song
          Required: true
        type: string
      text:
        description: |-
          Lyrics or text of the song
          Required: true
        type: string
    required:
    - link
    - releaseDate
    - text
    type: object
  models.SongRequest:
    description: Request payload for adding a new song
    properties:
      group:
        description: |-
          Group name of the song
          Required: true
          Min length: 1
        minLength: 1
        type: string
      song:
        description: |-
          Song name
          Required: true
          Min length: 1
        minLength: 1
        type: string
    required:
    - group
    - song
    type: object
  models.UpdateTrackRequest:
    description: Request payload for updating song details
    properties:
      group:
        description: |-
          Group name
          Required: true
          Min length: 1
        minLength: 1
        type: string
      id:
        description: |-
          ID of the track to update
          Required: true
        type: integer
      link:
        description: External link to the song
        type: string
      release_date:
        description: |-
          Release date
          Required: true
        minLength: 1
        type: string
      song:
        description: |-
          Song name
          Required: true
          Min length: 1
        minLength: 1
        type: string
      text:
        description: Lyrics or text of the song
        type: string
    required:
    - group
    - id
    - release_date
    - song
    type: object
host: localhost:8080
info:
  contact:
    email: fariz08@gmail.com
    name: Fariz Rustamov
    url: https://github.com/22fariz22
  description: Это API для управления музыкальной библиотекой.
  title: MusicLab API
  version: "1.0"
paths:
  /library:
    get:
      description: Возвращает список песен на основе фильтров
      parameters:
      - description: Фильтр по группе
        in: query
        name: group
        type: string
      - description: Фильтр по названию песни
        in: query
        name: song
        type: string
      - description: Фильтр по тексту
        in: query
        name: text
        type: string
      - description: Фильтр по дате выпуска
        in: query
        name: release_date
        type: string
      - description: Номер страницы
        in: query
        name: page
        type: integer
      - description: Количество записей на странице
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: Список песен
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение библиотеки
      tags:
      - Songs
  /lyrics/ping:
    get:
      consumes:
      - application/json
      description: Проверяет доступность базы данных, возвращает "pong"
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Проверка доступности базы данных
      tags:
      - Health
  /songs:
    post:
      consumes:
      - application/json
      description: Создает новую песню на основе данных запроса
      parameters:
      - description: Данные новой песни
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Созданная песня
          schema:
            $ref: '#/definitions/models.SongDetail'
        "400":
          description: Некорректные данные
        "500":
          description: Внутренняя ошибка сервера
      summary: Создание песни
      tags:
      - Songs
    put:
      consumes:
      - application/json
      description: Обновляет данные песни по ID
      parameters:
      - description: Данные для обновления
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTrackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Песня успешно обновлена
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный запрос
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Песня не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновление песни
      tags:
      - Songs
  /songs/{id}:
    delete:
      description: Удаляет песню из базы данных по ID
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Песня успешно удалена
        "400":
          description: Некорректный ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Песня не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удаление песни
      tags:
      - Songs
  /songs/{id}/verses:
    get:
      description: Возвращает куплет песни по ID песни и номеру страницы
      parameters:
      - description: ID песни
        in: path
        name: id
        required: true
        type: integer
      - description: Номер страницы
        in: query
        name: page
        required: true
        type: integer
      responses:
        "200":
          description: Куплет песни
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректный ID или номер страницы
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Куплет не найден
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение куплета
      tags:
      - Songs
swagger: "2.0"
